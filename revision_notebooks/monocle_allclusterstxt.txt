---
title: "Cell_mapping"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:





```{r}
#library(hdf5r)
library(monocle)
library(Matrix)
library(ggplot2)
library(cowplot)
#library(DelayedArray)
#library(DelayedMatrixStats)
library(limma)
library(SingleCellExperiment)
library(SingleR)
#library(S4Vectors)
#library(SingleCellExperiment)
#library(devtools)
library(htmlwidgets)
library(ggplot2)
library(dplyr)
library(Seurat)
library(plotly)
library(processx)
library(scuttle)
```

```{r}
gam_count <- Read10X_h5("raw_feature_bc_matrix.h5", use.names = TRUE, unique.features = TRUE)
#metadata <- read.delim("~/Desktop/gametocytes/seurat_analysis/files/early_metadata.tsv", row.names = 1)
metadata <- read.delim("~/Desktop/gametocytes/seurat_analysis/files/all_metadata.tsv", row.names = 1)
```

```{r}
ds.ds <- CreateSeuratObject(expr_matrix, project = "10X_early", assay = "RNA", meta.data = sample_sheet)
ds.ds <- NormalizeData(ds.ds, normalization.method = "LogNormalize", scale.factor = 10000)
ds.ds<- FindVariableFeatures(ds.ds, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(ds.ds)
ds.ds <- ScaleData(ds.ds, features = all.genes)
ds.ds <- RunPCA(ds.ds, features = VariableFeatures(object = ds.ds))
DimPlot(ds.ds, reduction = "pca")
ElbowPlot(ds.ds)
```

```{r}
ds.ds<- FindNeighbors(ds.ds, dims = 1:7)
ds.ds <- FindClusters(ds.ds, resolution = 0.3)
ds.ds <- RunUMAP(ds.ds, dims = 1:7)
DimPlot(ds.ds, reduction = "umap")
```

metadata for all clusters
```{r}
metadata$clusters <- plyr::mapvalues(metadata$clusters, c('0','1','2','3','4', '5', '6', '7', '8', '9') , c('C0','C1','C2','C3','C4', 'C5', 'C6', 'C7', 'C8', 'C9'))
order_clusters <- c('C0','C1','C2','C3','C4', 'C5', 'C6', 'C7', 'C8', 'C9')

#for all clusters_coloring
col_cluster <- setNames(c('#1f77b4', '#ff7f0e', '#279e68', '#d62728', '#aa40fc', '#8c564b','#e377c2', '#b5bd61', '#17becf', '#aec7e8'), c('C0','C1','C2','C3','C4', 'C5', 'C6', 'C7', 'C8', 'C9'))
```


for early clusters
```{r}
metadata$clusters <- plyr::mapvalues(metadata$clusters, c('0','3','4','6','9', '5', '2') , c('C_0','C_3','C_4','C_6','C_9', 'C_5', 'C_2'))
order_clusters <- c('C_0','C_3','C_4','C_6','C_9','C_5', 'C_2')
#phenotype$seurat_clusters <- factor(phenotype$seurat_clusters, levels = order_clusters)
#sort(phenotype$seurat_clusters)
```



```{r}
all_cells <- rownames(metadata)
sample_sheet <- metadata[all_cells,]

gene_annotation <- data.frame(gene_short_name=rownames(gam_count[,all_cells]), row.names = rownames(gam_count[,all_cells]))

expr_matrix <- as(as.matrix(gam_count[,all_cells]), "dgCMatrix")
```

```{r}
pd <- new("AnnotatedDataFrame", data = sample_sheet)
fd <- new("AnnotatedDataFrame", data = gene_annotation)
cds <- newCellDataSet(expr_matrix, phenoData = pd, featureData = fd, lowerDetectionLimit = 0.5, expressionFamily = negbinomial.size())
```

```{r}
cds <- estimateSizeFactors(cds)
cds <- estimateDispersions(cds)
```


```{r}
cds <- detectGenes(cds, min_expr = 0.1)
summary(fData(cds)$num_cells_expressed)
head(pData(cds))
```

```{r}
x <- pData(cds)$num_genes_expressed
x_1 <- (x - mean(x)) / sd(x)

summary(x_1)

df <- data.frame(x = x_1)
ggplot(df, aes(x)) +
  geom_histogram(bins = 50) +
  geom_vline(xintercept = c(-2, 2), linetype = "dotted", color = 'red')

```

```{r}
pData(cds)$UMI <- Matrix::colSums(exprs(cds))
head(pData(cds))
```

```{r}
ggplot(pData(cds), aes(num_genes_expressed, UMI)) + geom_point()
```

```{r}
disp_table <- dispersionTable(cds)
head(disp_table)
```
```{r}
table(disp_table$mean_expression>=0.1)
unsup_clustering_genes <- subset(disp_table, mean_expression >= 0.1) 
 
cds <- setOrderingFilter(cds, unsup_clustering_genes$gene_id)
plot_ordering_genes(cds)
```

```{r}
plot_pc_variance_explained(cds, return_all = FALSE)
```

```{r}
cds <- reduceDimension(cds, max_components = 2, num_dim = 5,
                          reduction_method = 'tSNE', verbose = TRUE)
cds <- clusterCells(cds,verbose = F, num_clusters = 3) #
```

```{r}
plot_cell_clusters(cds)
length(unsup_clustering_genes$gene_id)
```

```{r}
expressed_genes <- row.names(subset(fData(cds), num_cells_expressed >= 10))

```

```{r}
my_cds_subset <- reduceDimension(cds, max_components = 2, method = 'DDRTree', norm_method = "log", pseudo_expr = 1, scaling = TRUE, relative_expr = TRUE)
my_cds_subset <- orderCells(my_cds_subset)
```

```{r}
plot_cell_trajectory(my_cds_subset, color_by = "Pseudotime", cell_size = 2, show_branch_points = F)+scale_color_gradientn(colours = colorRampPalette(c('blue','green','yellow','red'))(100))
plot_cell_trajectory(my_cds_subset, color_by = "State")
plot_cell_trajectory(my_cds_subset, color_by = "clusters")

```

```{r}
diff_test_res <- differentialGeneTest(my_cds_subset[expressed_genes,], fullModelFormulaStr = "~sm.ns(Pseudotime, df=1)", reducedModelFormulaStr = "~1")
diff_test_res %>% arrange(qval) %>% head()
```

```{r}
ordering_genes <- row.names(subset(diff_test_res, qval < 0.05))
my_cds_subset <- setOrderingFilter(my_cds_subset, ordering_genes)
# ps_deg <- subset(diff_test_res, qval < 0.05 & use_for_ordering=="TRUE") subset only used for oerdering 

plot_ordering_genes(my_cds_subset)

```

```{r}
my_cds_subset_ad <- reduceDimension(my_cds_subset, n.components = 2, method = 'DDRTree', norm_method = 'log')
#my_cds_subset <- reduceDimension(my_cds_subset, max_components = 2, method = 'DDRTree')
my_cds_subset_ad <- orderCells(my_cds_subset_ad) #root_state = "4"

```
coloring
```{r}
col_cluster <- setNames(c('#1f77b4', '#ff7f0e', '#279e68', '#d62728', '#aa40fc', '#8c564b','#e377c2', '#b5bd61', '#17becf', '#aec7e8'), c('C0','C1','C2','C3','C4', 'C5', 'C6', 'C7', 'C8', 'C9'))

col_state <- setNames(c('darkblue', 'magenta', 'greenyellow', 'cadetblue2'), c('1', '2','3')) 

```



```{r}
plot_cell_trajectory(my_cds_subset_ad, color_by = "Pseudotime", cell_size = 2, show_branch_points = F)+scale_color_gradientn(colours = colorRampPalette(c('blue','green','yellow','red'))(100))
plot_cell_trajectory(my_cds_subset_ad, color_by = "clusters", cell_size = 2, show_branch_points = F)+scale_color_manual(values = col_cluster)
plot_cell_trajectory(my_cds_subset_ad, color_by = "State", cell_size = 2, show_branch_points = F)+scale_color_manual(values = col_state)
```




```{r}
plot_complex_cell_trajectory(my_cds_subset, color_by = 'Pseudotime') +  scale_colour_gradientn(colours = colorRampPalette(c('blue','green','yellow','red'))(100)) + theme(legend.position="top", legend.title=element_blank()) 
plot_complex_cell_trajectory(my_cds_subset, color_by = "clusters", cell_size = 0.5, cell_link_size = 2, show_branch_points = F, show_backbone = T)+scale_color_manual(values = col_cluster)
plot_complex_cell_trajectory(my_cds_subset, color_by = "State", cell_size = 0.5, cell_link_size = 2, show_branch_points = F, show_backbone = T)+scale_color_manual(values = col_state)
```

```{r}
options(repr.plot.width=4, repr.plot.height=4)
plot_complex_cell_trajectory(my_cds_subset, color_by = "female_signature", cell_size = 1, cell_link_size = 2, show_branch_points = F, show_backbone = T)+scale_color_gradientn(colours = colorRampPalette(c("Blue" ,"Yellow", "Red"))(100))+
    theme(axis.text.x = element_text(angle = 30, hjust = 1)) + theme (legend.position="right", legend.title=element_blank()) +
    theme(legend.position="top", legend.title=element_blank())

options(repr.plot.width=4, repr.plot.height=4)
plot_complex_cell_trajectory(my_cds_subset, color_by = "male_signature", cell_size = 1, cell_link_size = 2, show_branch_points = F, show_backbone = T)+scale_color_gradientn(colours = colorRampPalette(c("Blue" ,"Yellow", "Red"))(100))+
    theme(axis.text.x = element_text(angle = 30, hjust = 1)) + theme (legend.position="right", legend.title=element_blank()) +
    theme(legend.position="top", legend.title=element_blank())


options(repr.plot.width=6, repr.plot.height=4)
plot_complex_cell_trajectory(my_cds_subset, color_by = 'female_signature', show_branch_points = T, cell_size = 1, cell_link_size = 0.3) + scale_color_gradientn(colours = colorRampPalette(c("Blue" ,"Yellow"))(10))+ theme(legend.position="top", legend.title=element_blank()) + facet_wrap(~clusters, nrow = 1) + scale_size(range = c(0, 0))

options(repr.plot.width=6, repr.plot.height=4)
plot_complex_cell_trajectory(my_cds_subset, color_by = 'male_signature', show_branch_points = T, cell_size = 1, cell_link_size = 0.3) + scale_color_gradientn(colours = colorRampPalette(c("Blue" ,"Yellow"))(10))+ theme(legend.position="top", legend.title=element_blank()) + facet_wrap(~clusters, nrow = 1) + scale_size(range = c(0, 0))



```

```{r}
options(repr.plot.width=6, repr.plot.height=4)
plot_complex_cell_trajectory(my_cds_subset_ad, color_by = 'Pseudotime', show_branch_points = T, cell_size = 1, cell_link_size = 0.3) + scale_color_gradientn(colours = colorRampPalette(c('blue','green','yellow','red'))(100))+ theme(legend.position="top", legend.title=element_blank()) + facet_wrap(~clusters, nrow = 1) + scale_size(range = c(0, 30))

options(repr.plot.width=6, repr.plot.height=5)
comp <- plot_complex_cell_trajectory(my_cds_subset_ad, color_by = 'clusters', show_branch_points = T,  cell_size = 1, cell_link_size = 1) + facet_wrap(~clusters, nrow = 1) + scale_color_manual(values = col_cluster, name = "Clusters") + theme() + theme(legend.key=element_blank(), legend.text = element_text(size = 10, face ="bold", colour ="black"),legend.title = element_text(size = 12, face = "bold"),panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA), legend.position = "right")+theme_bw( base_line_size = 0) + labs(y = NULL)

plot_complex_cell_trajectory(my_cds_subset_ad, color_by = 'State', show_branch_points = T,  cell_size = 1.5, cell_link_size = 0.3) + facet_wrap(~State, nrow = 1) + scale_color_manual(values = col_state, name = "State") + theme() + theme(legend.key=element_blank(), legend.text = element_text(size = 10, face ="bold", colour ="black"),legend.title = element_text(size = 12, face = "bold"),panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA), legend.position = "right")+theme_bw( base_line_size = 0) + labs(y = NULL)
```

plotting
```{r}
png(filename = "/Users/mohammedmubasher/Desktop/gametocytes/seurat_analysis/figures/Traj_complex.png", width = 30, height= 15, unit = "cm", res= 300)
print(comp)
dev.off()
```



sex markers 
```{r}
female_genes <- read.table("/Users/mubashermohammed/Desktop/desktop_mubasher/seurat_analysis/female_genes.txt", quote="\"", comment.char="")
male_genes <- read.table("/Users/mubashermohammed/Desktop/desktop_mubasher/seurat_analysis/male_genes.txt", quote="\"", comment.char="")

fe_genes <- read.table("/Users/mubashermohammed/Desktop/desktop_mubasher/seurat_analysis/files/fe_genes.txt", quote="\"", comment.char="")

ma_genes <- read.table("/Users/mubashermohammed/Desktop/desktop_mubasher/seurat_analysis/files/ma_genes.txt", quote="\"", comment.char="")


```


```{r}

```




plot some genes 
```{r}
plot_cell_trajectory(my_cds_subset_ad, markers = fe_genes$V1, cell_size = 0.3, show_branch_points = F, use_color_gradient = TRUE)+scale_color_gradientn(colours = colorRampPalette(c('blue','white','red'))(10))

plot_cell_trajectory(my_cds_subset_ad, markers = ma_genes$V1, cell_size = 0.3, show_branch_points = F, use_color_gradient = TRUE)+scale_color_gradientn(colours = colorRampPalette(c('blue','white','red'))(10))

```

```{r}
px1 <- ggplot(ps_sheet, aes(x = Pseudotime, y = clusters, col = clusters)) + geom_quasirandom(groupOnX = FALSE, size =3)+ scale_color_manual(values = col_cluster) + xlab("Pseudotime") + ylab("Sling. Clusters") + theme_classic() +  labs( color = "Sling. clusters") +  theme(axis.text.x = element_text( hjust=1)) + theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 20),  axis.text.y = element_text(colour = "black", size = 20, angle = 1), legend.text = element_text(size = 15, face ="bold", colour ="black"),legend.title = element_text(size = 12, face = "bold"),panel.background = element_blank(), panel.border = element_rect(colour = "white", fill = NA, size = 1.2), legend.position = "right")

px2 <- ggplot(ps_sheet, aes(x = Pseudotime, y = State, col = State)) + geom_quasirandom(groupOnX = FALSE, size = 3)+ scale_color_manual(values = col_state) + xlab("Pseudotime") + ylab("Time points") + theme_classic()+  labs( color = "Time points") +  theme(axis.text.x = element_text( hjust=1)) + theme(legend.key=element_blank(), axis.text.x = element_text(colour = "black", size = 20),  axis.text.y = element_text(colour = "black", size = 20, angle = 1), legend.text = element_text(size = 15, face ="bold", colour ="black"),legend.title = element_text(size = 12, face = "bold"),panel.background = element_blank(), panel.border = element_rect(colour = "white", fill = NA, size = 1.2), legend.position = "right")
```

```{r}
cluster_order <- c('C4','C9','C0','C3','C6', 'C5', 'C2', 'C7', 'C8', 'C1')
ps_sheet$clusters <- factor(ps_sheet$clusters, levels = cluster_order)
#col_cluster <- setNames(c('purple3','orange','red3','green3','blue3','magenta','#C16200','#71226e'), cluster_order)




state_order <- c('1','3','2')
ps_sheet$State <- factor(ps_sheet$State, levels = state_order)


```

```{r}

png(filename = "/Users/testi/Desktop/desktop_mubasher/seurat_analysis/figures/bulk_label_score.png", width = 18, height= 15, unit = "cm", res= 300)
print(bulk_labels)
dev.off()
```

```


convert my_cds_subset to matrix 
```{r}
gene_data <- data.frame(t(as.matrix(my_cds_subset@assayData$exprs)),cluster=my_cds_subset$clusters,check.names = F)
average_data <- aggregate(.~cluster, gene_data, mean)
cluster_name <- average_data[,1]
average_data <- apply(average_data[,2:ncol(average_data)],2,as.numeric)
rownames(average_data) <- cluster_name
average_data <- t(average_data)
phmat1 <- t(scale(t(average_data)))
```

```{r}
pheatmap(phmat1[female_genes$V1, ], cluster_cols = F,  cluster_rows = T, show_colnames = T, clustering_method = "complete", fontsize = 6, silent = F, cellwidth = 10, cellheight = 10, clustering_distance_rows = "euclidean", show_rownames = T, scale = "row")
```


prepare data for 3D plotting
```{r}

traj.plot <- plot_cell_trajectory(my_cds_subset, color_by = "Pseudotime", cell_size = 1, show_branch_points = F)+scale_color_gradientn(colours = colorRampPalette(c('blue','green','yellow','red'))(100))
plot.data <- ggplot_build(traj.plot)[["plot"]][["data"]]
#PC1 <- my_cds_subset@auxClusteringData$tSNE$reduced_dimension[1, ]
#PC2 <- my_cds_subset@auxClusteringData$tSNE$reduced_dimension[2, ]
#PC3 <- my_cds_subset@auxClusteringData$tSNE$reduced_dimension[3, ]

#PC1 <- my_cds_subset@auxOrderingData$DDRTree$pr_graph_cell_proj_dist[1, ]
#PC2 <- my_cds_subset@auxOrderingData$DDRTree$pr_graph_cell_proj_dist[2, ]
#PC3 <- plot_data$data_dim_1
#PC4 <- plot_data$data_dim_2

DM_1 <- my_cds_subset@auxOrderingData$DDRTree$pr_graph_cell_proj_dist[1, ]
DM_2 <- plot.data$data_dim_1
DM_3 <- plot.data$data_dim_2

plot.data$Component1 <- DM_1
plot.data$Component2 <- DM_2
plot.data$Component3 <- DM_3


expr_data <- as.matrix(ds.ds@assays$RNA@data)
row.names(expr_data) <- str_replace(row.names(expr_data), "-", "_")
all_data <- as.matrix(t(expr_data))
m <- match(rownames(all_data), plot.data$sample_name)

my_df <- data.frame(plot.data, all_data)

```

fig-clusters 
```{r}
#scene = list(camera = list(eye = list(x = -1.25, y = 1.25, z = 1.25)))
scene = list(camera = list(eye = list(x = 2, y = -1.5, z = 0.25)))

fig <- plot_ly(data = plot.data, 
        x = ~Component1, y = ~Component2 , z = ~Component3,  color = ~clusters, colors = col_cluster, type = "scatter3d",  mode = "markers", marker = list(size = 3, width=2), text=~sample_name,
        marker = list(size = 5, width=500),  hoverinfo="trajectory") %>% 
    layout(title = "", scene = scene)

```

fig-Pseudotime
```{r}
scene_p = list(camera = list(eye = list(x = 2, y = -1.5, z = 0.25)))

fig2 <- plot_ly(data = my_df, 
        x = ~Component1, y = ~Component2 , z = ~Component3,  color = ~Pseudotime, colors = colorRampPalette(c('blue','green','yellow','red'))(100), type = "scatter3d",  mode = "markers", marker = list(size = 5, width=2), text=~sample_name,
        marker = list(size = 5, width=500),  hoverinfo="trajectory") %>% 
  layout(title = "", scene = scene_p)
```

fig-gene exprs 
```{r}
scene_g = list(camera = list(eye = list(x = 2, y = -1.5, z = 0.25)))
fig3 <- plot_ly(data = my_df, 
                x = ~Component1, y = ~Component2 , z = ~Component3,  color = ~PF3D7_0904200, type = "scatter3d",  mode = "markers", marker = list(size = 5, width=2), text=~sample_name,
                marker = list(size = 5, width=500),  hoverinfo="trajectory") %>% 
  layout(title = "", scene = scene_g)


fig4 <- plot_ly(data = my_df, 
                x = ~Component1, y = ~Component2 , z = ~Component3,  color = ~PF3D7_1215500, type = "scatter3d",  mode = "markers", marker = list(size = 5, width=2), text=~sample_name,
                marker = list(size = 5, width=500),  hoverinfo="trajectory") %>% 
  layout(title = "", scene = scene_g)

```

extract cells pf trjectory i-e state 1 
```{r}
early_cells <- rownames(my_cds_subset_ad@phenoData[my_cds_subset_ad@phenoData@data$State == 1, ])

male_cells <-  rownames(my_cds_subset_ad@phenoData[my_cds_subset_ad@phenoData@data$State == 3, ]) 

female_cells <- rownames(my_cds_subset_ad@phenoData[my_cds_subset_ad@phenoData@data$State == 2, ])
  



```
save cells as txt 
```{r}
write.table(female_cells, file = "/Users/mubashermohammed/Desktop/desktop_mubasher/seurat_analysis/files/female_cells_new.txt", sep = "\t",
            row.names = FALSE)
```






saving img
```{r}
orca(fig4, file = "./figures/plotly_pt_bins_male_gene.png", width = 5, height = 3, scale =20)
```






cell-mapping to bulk gametocyte data 

```{r}
gam <- read_excel("gametocyte_cmp_data.xlsx")
gam_bulk <- data.frame(gam, row.names = "GeneID")
mat <- gam_bulk[grepl("^PF3D7", rownames(gam_bulk)), ]
mat2 <- as.matrix(mat[,-1])
mtxx <- as.data.frame(abs(mat2))
#rownames(mtxx) <- sub("_", "-", rownames(mtxx))
labels <- colnames(mtxx)
coldata <- DataFrame(label = labels)

#mtx <- scale(mat2)
sce <- SingleCellExperiment(assays = list(counts = mtxx), colData = coldata)
mat_counts <- counts(sce)
```

```{r}

sizeFactors(sce) <- runif(ncol(sce))
sizeFactors(sce)

sceM <- logNormCounts(sce)
saveRDS(sceM, file = "SCE_bulk_gametocyte.rds")

```

```{r}
cells_metadata <- read.csv("SCENIC/data_new/analys/cells_metadata.csv", row.names = 1)
ds.ds <- CreateSeuratObject(expr_matrix, project = "10X", assay = "RNA", meta.data = cells_metadata)

#process the seurat object








seu_sce <- as.SingleCellExperiment(ds.ds)
sceG <- seu_sce[,colSums(counts(seu_sce)) > 0]
#seu_sce.norm <- logNormCounts(seu_sce)
seu_sce.norm <- logNormCounts(sceG)
```

```{r}
#pred.grun <- SingleR(test=seu_sce.norm, ref=sceM, labels=sceM$label, assay.type.test = 1)
pred.grun <- SingleR(test=seu_sce.norm, ref=sceM, labels=sceM$label, assay.type.test = 'logcounts', assay.type.ref = 'logcounts')

table(pred.grun$labels)

bulk_labels <- plotScoreHeatmap(pred.grun)
```

```{r}

```





























monocle 3

prepare data 
```{r}
ds.ds<- RunUMAP(object = ds.ds, reduction = "pca", dims = 1:5, n.components = 3)

gene_annotation <- as.data.frame(rownames(ds.ds@reductions[["pca"]]@feature.loadings), row.names = rownames(ds.ds@reductions[["pca"]]@feature.loadings))
colnames(gene_annotation) <- "gene_short_name"


cell_metadata <- as.data.frame(ds.ds@assays[["RNA"]]@counts@Dimnames[[2]], row.names = ds.ds@assays[["RNA"]]@counts@Dimnames[[2]])
colnames(cell_metadata) <- "barcode"

New_matrix <- ds.ds@assays[["RNA"]]@counts
New_matrix <- New_matrix[rownames(ds.ds@reductions[["pca"]]@feature.loadings), ]
expression_matrix <- New_matrix

cds_from_seurat <- new_cell_data_set(expression_matrix,
                                     cell_metadata = cell_metadata,
                                     gene_metadata = gene_annotation)

```

```{r}
recreate.partition <- c(rep(1, length(cds_from_seurat@colData@rownames)))
names(recreate.partition) <- cds_from_seurat@colData@rownames
recreate.partition <- as.factor(recreate.partition)

cds_from_seurat@clusters@listData[["UMAP"]][["partitions"]] <- recreate.partition

list_cluster <- ds.ds@meta.data[[sprintf("clusters")]]
names(list_cluster) <- ds.ds@assays[["RNA"]]@data@Dimnames[[2]]

cds_from_seurat@reduce_dim_aux@listData[["UMAP"]] <-ds.ds@reductions[["umap"]]@cell.embeddings

cds_from_seurat@preprocess_aux$gene_loadings <- ds.ds@reductions[["pca"]]@feature.loadings
```

```{r}


cds_from_seurat <- learn_graph(cds_from_seurat, use_partition = T)
```



```{r}
cds <- new_cell_data_set(expr_matrix,
                         cell_metadata = sample_sheet,
                         gene_metadata = gene_annotation)

cds <- preprocess_cds(cds, num_dim = 5)
plot_pc_variance_explained(cds)
```

```{r}
cds <- reduce_dimension(cds, max_components = 3, preprocess_method = "LSI")
cds <- cluster_cells(cds, reduction_method = "UMAP")


```

```{r}
cds <- learn_graph(cds, use_partition = TRUE)
cds <- order_cells(cds, reduction_method = "UMAP") 
plot_cells(cds)
```


networkx
```{r}
# Load packages and annotation data
library(reshape2)
#library(umap)
library(pheatmap)
library(igraph)
#library(GGally) # ggplot2 >= 3.3.0
library(ggplot2)
#windowsFonts(TNM = windowsFont("Times New Roman"))
#windowsFonts(HNR = windowsFont("Helvetica Neue CE 55 Roman")) # Use specific font on Windows platform
#library(RcisTarget)
#library(AUCell)
# Load extra functions
source("SIGNET.R")

```

```{r}
gene_tf <- read.csv("grn_adj_v2.csv")

```

```{r}
start = c("PF3D7_1305200","PF3D7_0516800","PF3D7_1222400","PF3D7_1143100","PF3D7_1317200")

edgecol = c("#0073c2","#ff7f0e","#2ca02c","#d62728","#9467bd","#efc000")  


```



```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
